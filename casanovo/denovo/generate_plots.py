USAGE = "Generates PC plots for DeepNovo, ICML Casanovo, and MSKB Casanovo given the new annotated6 multi-.mgf benchmark."
# !!! HEAVILY WORK IN PROGRESS!
num_args = 0


import sys
import os

import pandas as pd
import numpy as np

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import auc

import pyteomics.mgf as mgf
import casanovo.denovo.evaluate as evaluate
import depthcharge
import depthcharge.masses


def _get_true_labels(mgf_filename: str):
    """
    Extract a list of peptide labels with scans from an annotated .mgf and make it compatible with depthcharge AA vocabulary

    Parameters:
    -----------
    mgf_filename : str
        Path to the .mgf file to extract from.

    Returns:
    --------
    mgf_df : pandas DF
        The true peptide labels associated with scans with columns "scan" and "true_seq" respectively
    """
    scans = []
    seqs = []
    with mgf.MGF(mgf_filename) as f_in:
        for spectrum_dict in f_in:
            scans.append(int(spectrum_dict["params"]["scans"]))
            seqs.append(spectrum_dict["params"]["seq"])
    mgf_df = pd.DataFrame(
        {"scan": scans, "true_seq": seqs}
    )  # .sort_values(by=["scan"])
    mgf_df["true_seq"] = mgf_df["true_seq"].str.replace(
        "C[57.02]", "C+57.021", regex=False
    )
    mgf_df["true_seq"] = mgf_df["true_seq"].str.replace(
        "M[15.99]", "M+15.995", regex=False
    )
    mgf_df["true_seq"] = mgf_df["true_seq"].str.replace(
        "N[0.98]", "N+0.984", regex=False
    )
    mgf_df["true_seq"] = mgf_df["true_seq"].str.replace(
        "Q[0.98]", "Q+0.984", regex=False
    )
    return mgf_df


def _get_preccov_tab_mgf(tab_filename_dir: str, mgf_filename_dir: str):
    """
    Extract the precision and coverage from an new DeepNovo .tab directory and the associated input .mgf directory

    Parameters:
    ----------
    tab_filename_dir : str
        Path to the .tab file directory generated by DeepNovo (output).
    mgf_filename_dir : str
        Path to the input .mgf file directory to DeepNovo.

    Returns:
    --------
    precision : list[float]
        List of the precision values to plot
    coverage : list[float]
        List of the coverage values to plot
    """
    all_comparison_dfs = []
    for mgf_file in os.listdir(mgf_filename_dir):
        mgf_filename = os.path.join(mgf_filename_dir, mgf_file)
        tab_filename = os.path.join(tab_filename_dir, mgf_file + "_decode_output.tab")
        if not os.path.isfile(mgf_filename):
            print("Could not find file " + mgf_filename)
            continue
        if not os.path.isfile(tab_filename):
            print("Could not find file " + tab_filename)
            continue
        tab_df = pd.read_csv(tab_filename, sep="\t", index_col=False)
        tab_df["output_seq"] = tab_df["output_seq"].str.replace(",", "", regex=False)
        tab_df["output_seq"] = tab_df["output_seq"].str.replace(
            "Cmod", "C+57.021", regex=False
        )
        tab_df["output_seq"] = tab_df["output_seq"].str.replace(
            "Mmod", "M+15.995", regex=False
        )
        tab_df["output_seq"] = tab_df["output_seq"].str.replace(
            "Nmod", "N+0.984", regex=False
        )
        tab_df["output_seq"] = tab_df["output_seq"].str.replace(
            "Qmod", "Q+0.984", regex=False
        )
        tab_df["output_seq"] = tab_df["output_seq"].str.replace(
            "C[57.02]", "C+57.021", regex=False
        )
        tab_df["output_seq"] = tab_df["output_seq"].str.replace(
            "M[15.99]", "M+15.995", regex=False
        )
        tab_df["output_seq"] = tab_df["output_seq"].str.replace(
            "N[0.98]", "N+0.984", regex=False
        )
        tab_df["output_seq"] = tab_df["output_seq"].str.replace(
            "Q[0.98]", "Q+0.984", regex=False
        )

        all_comparison_dfs.append(
            pd.merge(
                _get_true_labels(mgf_filename),
                tab_df[["scan", "output_seq", "output_score"]],
                how="left",
                on="scan",
            )
        )

    raw_pc_df = pd.concat(all_comparison_dfs, axis=0).sort_values(
        by=["output_score"], ascending=False, ignore_index=True
    )

    print(raw_pc_df)

    # For logging purposes
    na_spectra = raw_pc_df["output_seq"].isna().sum()
    print(
        f"Number of unpredicted spectra is {na_spectra} out of {len(raw_pc_df['output_seq'])}. This is {na_spectra*100/len(raw_pc_df['output_seq']):.2f}% of spectra"
    )

    # ! Remove this line to generate full PC curve. (Currently only considers spectra with valid predictions)
    raw_pc_df = raw_pc_df[raw_pc_df["output_seq"].isna() == False]

    print(raw_pc_df)

    return _calc_pc(raw_pc_df)


def _get_preccov_mztab_mgf(
    mzt_filename_dir: str, mgf_filename_dir: str, excl_n_terminals: bool
):
    """
    Extract the precision and coverage from an new Casanovo .mztab directory and the associated input .mgf directory

    Parameters:
    ----------
    mzt_filename_dir : str
        Path to the .tsb file generated by Casanovo (output).
    mgf_filename_dir : str
        Path to the input .mgf file to Casanovo.
    excl_n_terminals : bool
        If true, will mark all n-terminal peptide inputs/predictions as incorrect

    Returns:
    --------
    precision : list[float]
        List of the precision values to plot
    coverage : list[float]
        List of the coverage values to plot
    """
    all_comparison_dfs = []
    for mgf_file in os.listdir(mgf_filename_dir):
        mgf_filename = os.path.join(mgf_filename_dir, mgf_file)
        tab_filename = None  # TODO
        if not os.path.isfile(mgf_filename):
            print("Could not find file " + mgf_filename)
            continue
        if not os.path.isfile(tab_filename):
            print("Could not find file " + tab_filename)
            continue
        mzt_df = None  # TODO

        # ! Due to .mztab output not having a scan column (confirmed) may need to merge by index

        all_comparison_dfs.append(
            pd.merge(
                _get_true_labels(mgf_filename),
                mzt_df[["scan", "output_seq", "output_score"]],
                how="left",
                on="scan",  # ! See above
            )
        )

    raw_pc_df = pd.concat(all_comparison_dfs, axis=0).sort_values(
        by=["output_score"], ascending=False
    )

    print(raw_pc_df)

    return _calc_pc(raw_pc_df)


def _calc_pc(raw_pc_df):
    """
    Calculates the precision and coverage from a pandas dataframe with columns "scan", "true_seq", "output_seq", "output_score"

    Parameters:
    -----------
    raw_pc_df : pandas DataFrame
        A pandas DataFrame with specs as listed in the docstring

    Returns:
    --------
    precision : list[float]
        List of the precision values to plot
    coverage : list[float]
        List of the coverage values to plot
    """
    aa_matches_batch = evaluate.aa_match_batch(
        raw_pc_df["true_seq"],
        raw_pc_df["output_seq"],
        depthcharge.masses.PeptideMass("massivekb").masses,
    )
    peptide_matches = np.asarray([aa_match[1] for aa_match in aa_matches_batch[0]])
    precision = np.cumsum(peptide_matches) / np.arange(1, len(peptide_matches) + 1)
    coverage = np.arange(1, len(peptide_matches) + 1) / len(peptide_matches)

    print(f"---\nPeptide precision @ coverage=1 = {precision[-1]:.3f}")

    return precision, coverage


def _plot_without_threshold(precision: list, coverage: list, auc_title: str, ax):
    """
    Takes in a subplot and plots on it the precision coverage curve generated from the passed in lists.
    Will also add the AUC value to the plot

    Parameters:
    -----------
    precision : list[float]
        The precision float list for the PC curve
    coverage : list[float]
        The coverage float list for the PC curve
    auc_title : str
        The label for the AUC value
    ax : Subplot (matplotlib.pyplot obj)
        The subplot to plot these values on
    """
    ax.plot(coverage, precision, label=f"{auc_title} = {auc(coverage, precision):.3f}")


def _plot_with_threshold(
    coverage: list, precision: list, threshold: int, auc_title: str, ax
):
    """
    Takes in a subplot and plots on it the precision coverage curve generated from the passed in lists. Additionally adds
    a threshold start to indicate where the mass filter takes effect.
    Will also add the AUC value to the plot

    Parameters:
    -----------
    coverage : list[float]
        The coverage float list for the PC curve
    precision : list[float]
        The precision float list for the PC curve
    threshold : int
        The index (in relation to the coverage and precision lists) at which the mass filter takes effect
    auc_title : str
        The label for the AUC value
    ax : Subplot (matplotlib.pyplot obj)
        The subplot to plot these values on
    """
    ax.plot(coverage, precision, label=f"{auc_title} = {auc(coverage, precision):.3f}")
    ax.scatter(
        coverage[threshold],
        precision[threshold],
        s=20,
        marker="*",
        c="red",
        edgecolors="black",
        zorder=10,
    )


def plot_info(plot_title: str, output_path: str):
    """
    # ! Temporary method to generate plots for one species
    """
    plt.style.use(["seaborn-white", "seaborn-paper"])
    sns.set_context("paper", font_scale=1)
    width = 4
    height = width / 1.618
    _, ax = plt.subplots(figsize=(width, height))

    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)

    ax.set_xlabel("Coverage")
    ax.set_ylabel("Peptide precision")

    # Use PC below
    tab_dir = (
        "/net/noble/vol2/home/vananth3/2022_varun_ls-casanovo/results/deepnovo-res/mus"
    )
    mgf_dir = "/net/noble/vol2/home/vananth3/2022_varun_ls-casanovo/data/annotated6/Mus-musculus"

    dn_prec, dn_cov = _get_preccov_tab_mgf(tab_dir, mgf_dir)
    _plot_without_threshold(dn_prec, dn_cov, "DeepNovo AUC", ax)

    ax.legend(loc="lower left")
    sns.despine()
    plt.title(plot_title)
    plt.grid(True)
    plt.savefig(output_path, dpi=300, bbox_inches="tight")

    print("Saved Figure.")


def main():
    if len(sys.argv) != num_args + 1:
        print(USAGE)
        return 1
    print("Starting...")
    # method()
    print("Complete")


def temp():
    plot_info("DeepNovo SingleTest", "dnst2.png")


if __name__ == "__main__":
    # main()
    temp()
